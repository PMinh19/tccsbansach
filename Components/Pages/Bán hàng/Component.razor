@page "/cart"
@using System.Security.Claims
@using BanSach.Components.Model
@using BanSach.Components.Services
@using BanSach.Components.IService
@using Microsoft.AspNetCore.Http
@using System.Globalization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IWebHostEnvironment Environment
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IItemManagement ItemManagement
@rendermode InteractiveServer
@inject IDialogService DialogService
@inject ICartService CartService

<style>
   

    .

    .cart-item {
        display: flex;
        align-items: center;
        padding: 15px;
        border-bottom: 1px solid #ddd;
        background-color: #fff;
        border-radius: 6px;
        margin-bottom: 10px;
        justify-content: space-between; /* Đảm bảo tất cả các phần tử đều được căn đều */
    }

    .cart-item-image {
        width: 100px; /* Kích thước ảnh sản phẩm */
        height: 100px;
        object-fit: cover;
        border-radius: 8px;
        margin-right: 15px; /* Khoảng cách giữa ảnh và các phần tử còn lại */
    }

    .cart-item-details {
        display: flex;
        flex-direction: column;
        justify-content: center;
        flex-grow: 1;
    }

    .cart-item-name {
        font-weight: bold;
        font-size: 14px;
        color: #333;
        margin-bottom: 5px;
    }

    .cart-item-price {
        font-size: 14px;
        font-weight: bold;
        color: #e74c3c;
        margin-bottom: 5px;
    }

    .cart-item-quantity {
        display: flex;
        align-items: center;
        font-size: 14px;
        margin-right: 15px; /* Khoảng cách giữa nút số lượng và nút xóa */
    }

    .mud-numeric-field {
        padding: 5px 10px;
        font-size: 12px; /* Giảm kích thước chữ */
        border: 1px solid #ccc;
        border-radius: 4px;
        width: 50px; /* Kích thước nhỏ cho nút điều chỉnh số lượng */
        height: 30px; /* Chiều cao nhỏ hơn */
    }

    .cart-item-actions {
        display: flex;
        align-items: center;
        justify-content: flex-end; /* Căn chỉnh nút xóa ở phía bên phải */
    }

    .cart-item-remove {
        margin-top: 10px;
        background-color: #e74c3c !important; /* Màu đỏ cho nút xóa */
        color: white !important;
        border-radius: 4px;
        padding: 8px 15px;
        border: none;
        cursor: pointer;
        font-weight: bold;
    }

        .cart-item-remove:hover {
            background-color: #c0392b !important; /* Màu đỏ đậm khi hover */
        }

    .cart-checkout-btn {
        margin-top: 10px;
        background-color: #e74c3c !important; /* Màu đỏ cho nút thanh toán */
        color: white !important;
        width: 100%;
        font-size: 16px;
        padding: 15px;
        border-radius: 6px;
        border: none;
        cursor: pointer;
        font-weight: bold;
    }

        .cart-checkout-btn:hover {
            background-color: #c0392b !important; /* Màu đỏ đậm khi hover */
        }

    .cart-empty-message {
        text-align: center;
        font-size: 18px;
        color: #e74c3c; /* Màu đỏ cho thông báo giỏ hàng trống */
    }



</style>
<MudGrid Class="cart-container pt-2">
    <MudItem xs="12" sm="12">
        @if (product_carts != null && product_carts.Any())
        {
            @foreach (var cartItem in product_carts)
            {
                <MudGrid Class="cart-item">
                   
                    <MudItem xs="2" sm="1" md="1" Class="d-flex justify-center align-items-center">
                        <MudCheckBox T="bool" @bind-Checked="cartItem.IsSelected" Color="Color.Primary" />
                    </MudItem>

                  
                    <MudItem xs="4" sm="3" md="3">
                        <MudImage Class="cart-item-image" ObjectFit="ObjectFit.Cover" Width="150" Height="150" Src="@cartItem.Product.Img" />
                    </MudItem>

                   
                    <MudItem md="4" sm="4" xs="4" Class="cart-item-details">
                        <div class="cart-item-name">@cartItem.Product.ProductName</div>
                        <div class="cart-item-price">@string.Format(new CultureInfo("vi-VN"), "{0:N0}", cartItem.Product.SellPrice) vnđ</div>
                    </MudItem>

                    <MudItem xs="2" sm="2" md="2" Class="cart-item-quantity">
                        
                        <MudNumericField T="int" @bind-Value="cartItem.Quantity" Min="1"
                                         Style="margin-bottom: 10px; width: 80px; font-weight: bold; color: black; background-color: white; border: 2px solid #ccc;" />
                    </MudItem>

                    <MudItem xs="2" sm="2" md="2" Class="cart-item-actions">
                   
                        <MudButton Class="cart-item-remove" Variant="Variant.Filled" @onclick="() => RemoveFromCart(cartItem)">
                            Xóa
                        </MudButton>
                    </MudItem>
                </MudGrid>
            }

            <MudItem xs="12" sm="12" md="12" Class="pt-4">
                <MudButton Class="cart-checkout-btn" ButtonType="ButtonType.Submit" Variant="Variant.Filled" @onclick="HandleBuyNow">Mua hàng</MudButton>
            </MudItem>
        }
        else
        {
            <MudText Class="cart-empty-message">Giỏ hàng trống.</MudText>
        }
    </MudItem>
</MudGrid>



@code {
    private List<Product_cart> product_carts = new List<Product_cart>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            product_carts = await GetAllProductCart();
        }
        catch (Exception ex)
        {
            DialogService.ShowMessageBox("Lỗi", $"Không thể tải giỏ hàng: {ex.Message}");
        }
    }

    private async Task<List<Product_cart>> GetAllProductCart()
    {
        var carts = await CartService.GetAllPCart();
        if (carts == null || !carts.Any())
        {
            return new List<Product_cart>();
        }
        return carts;
    }

    private async Task HandleBuyNow()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user == null || !user.Identity.IsAuthenticated)
        {
            DialogService.ShowMessageBox("Lỗi", "Vui lòng đăng nhập để tiếp tục.");
            return;
        }

        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
        if (userIdClaim == null)
        {
            DialogService.ShowMessageBox("Lỗi", "Không thể xác định người dùng.");
            return;
        }
        int userId = int.Parse(userIdClaim.Value);

        if (product_carts == null || !product_carts.Any())
        {
            DialogService.ShowMessageBox("Lỗi", "Không có sản phẩm nào trong giỏ hàng.");
            return;
        }

        var selectedItems = product_carts
            .Where(c => c.IsSelected && c.Quantity > 0 && c.Product != null && c.Product.SellPrice > 0)
            .ToList();

        if (!selectedItems.Any())
        {
            DialogService.ShowMessageBox("Lỗi", "Vui lòng chọn ít nhất một sản phẩm hợp lệ để thanh toán.");
            return;
        }

        int totalQuantity = selectedItems.Sum(c => c.Quantity);
        decimal totalPrice = selectedItems.Sum(c => c.Quantity * c.Product.SellPrice);

        Console.WriteLine($"Tổng số lượng: {totalQuantity}");
        Console.WriteLine($"Tổng giá trị: {totalPrice:C}");

        var productBill = new Product_bill
            {
                FeaturePId = product_carts.First(c => c.IsSelected).ProductId,
                Price = totalPrice,
                Quantity = totalQuantity,
                Created = DateTime.Now,
                Updated = DateTime.Now,
            };

        Console.WriteLine($"ProductBill - FeaturePId: {productBill.FeaturePId}, Price: {productBill.Price}, Quantity: {productBill.Quantity}");

        var productBillResult = await CartService.PlaceProductBill(productBill);

        if (productBillResult != null)
        {
            Console.WriteLine($"Hóa đơn thành công! ID: {productBillResult.ProductBillId}");
            navigationManager.NavigateTo($"/invoice/{productBillResult.ProductBillId}");
        }
        else
        {
            DialogService.ShowMessageBox("Lỗi", "Đặt hàng không thành công. Vui lòng thử lại.");
        }
    }

    private async Task RemoveFromCart(Product_cart cartItem)
    {
        try
        {
            await CartService.DeletePCart(cartItem);

            product_carts = await GetAllProductCart();

            DialogService.ShowMessageBox("Thành công", "Sản phẩm đã được xóa khỏi giỏ hàng.");
        }
        catch (Exception ex)
        {
            DialogService.ShowMessageBox("Lỗi", $"Không thể xóa sản phẩm: {ex.Message}");
        }
    }
}
