@page "/Ql/Product"
 @using System.Data
@using System.Diagnostics.Metrics
@using BanSach.Components.Dialog.QlProduct
@using BanSach.Components.IService
@using BanSach.Components.Model
@using System.Globalization
@using BanSach.Components.Services
@inject IDialogService DialogService
@inject NavigationManager navigationManager
@inject IItemManagement ItemManagement
@inject HttpClient httpClient
@rendermode InteractiveServer
@inject IDialogService DialogService
<div style="display:flex; padding: 30px 30px 0 30px;">
    <h2 style="font-family:Arial;">Danh sách sách</h2>
    <MudSpacer></MudSpacer> 
    <MudButton OnClick="AddProduct" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Thêm</MudButton>
    @* <MudButton OnClick="AddProduct" ButtonType="ButtonType.Submit" Variant="Variant.Filled" style="background:#4CAF50" Class="ml-auto">Thêm</MudButton>
    <MudButton OnClick="AddProduct" ButtonType="ButtonType.Submit" Variant="Variant.Filled" style="background:#B71C1C" Class="ml-auto">Xóa</MudButton> *@
</div>
<MudTable Items="@products" Filter="new Func<Product,bool>(FilterFunc1)" Dense="true" Breakpoint="Breakpoint.None" Virtualize="true"
Style="white-space:nowrap" Bordered="true" RowClass="cursor-pointer" Striped="true" Hover="true" HorizontalScrollbar="true">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Tìm kiếm" Adornment="Adornment.Start"
        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>      
        <MudTh>#</MudTh>
        <MudTh>Tên</MudTh>
        <MudTh>Giá bán</MudTh>
        <MudTh>Tác giả</MudTh>
        <MudTh>Danh mục</MudTh>
        <MudTh>Nhà xuất bản</MudTh>
        <MudTh>Số lượng</MudTh>
        <MudTh>Ảnh bìa</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="#">
            <MudTd DataLabel="#">
                <input name="selected" type="checkbox"/>
            </MudTd>

        </MudTd>
        <MudTd DataLabel="Tên"><div @onclick="@(() => DetailProduct(context.ProductId))">@context.ProductName</div></MudTd>
        <MudTd DataLabel="Giá bán">
            <div @onclick="@(() => DetailProduct(context.ProductId))">@string.Format(new CultureInfo("vi-VN"), "{0:N0}", context.SellPrice)</div>
        </MudTd>
        <MudTd DataLabel="Tác giả"><div @onclick="@(() => DetailProduct(context.ProductId))">@context.Author</div></MudTd>
        <MudTd DataLabel="Danh mục">
            <div @onclick="@(() => DetailProduct(context.ProductId))">
                @GetCategoryName(context.CategoryId)
            </div>
        </MudTd>
        <MudTd DataLabel="Nhà xuất bản"><div @onclick="@(() => DetailProduct(context.ProductId))">@context.Publisher</div></MudTd>
        <MudTd DataLabel="Số lượng"><div @onclick="@(() => DetailProduct(context.ProductId))">@context.Quantity</div></MudTd>
        <MudTd DataLabel="Ảnh bìa">
            <MudImage ObjectFit="ObjectFit.Cover" Width="50" Height="30" Src="@context.Img" Class="rounded-lg" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSize="10" @bind-PageIndex="@pageIndex" OnPageChanged="SetPage" />
    </PagerContent>
</MudTable>

<MudSpacer />


@code{
    bool IsSelected = false;
    public int categoryId;
    private Category category = new Category();
    private List<Category> categories = new List<Category>();
    private List<Product> products = new List<Product>();
    private string? categoryName;
    public Product product = new Product();
    private string resultMessage = string.Empty;
    private string searchString1 = "";
    private IEnumerable<Product> Products = new List<Product>();
    private IEnumerable<Product> PaginatedData => Products.Skip((pageIndex - 1) * pageSize).Take(pageSize);
    private int pageSize = 10;
    private int pageIndex = 1;
    private bool isSelectAll = false;  // Biến để lưu trạng thái chọn tất cả


    private void SetPage(int index)
    {
        pageIndex = index;
    }
    private async Task<List<Product>> getAllSach() => await ItemManagement.GetAllItem();


    protected override async Task OnInitializedAsync()
    {
        products = await getAllSach();     
        categories = await ItemManagement.GetAllCategogy();
    }

    // tìm kiếm
    private bool FilterFunc1(Product Product) => FilterFunc(Product, searchString1);

    private bool FilterFunc(Product? product, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (product == null)
            return false;

        if (product.ProductName != null &&
            product.ProductName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (product.Author !=null && product.Author.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if( product.Publisher !=null && product.Publisher.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (categoryName !=null && category.CategoryName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        string combinedValues = $"{product.CostPrice} {product.SellPrice} {product.CategoryId} {product.Year}{product.PageNumber} ";
        return combinedValues.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }


    private void AddProduct()
    {
        navigationManager.NavigateTo("/Ql/add");
    }
    private void DetailProduct( int productId)
    {
        navigationManager.NavigateTo($"/{productId}");
    }
    private string GetCategoryName(int categoryId)
    {
        var category = categories.FirstOrDefault(c => c.CategoryId == categoryId);
        return category?.CategoryName ?? "Chưa xác định"; // Default value if category is not found
    }
    // private async Task DeleteSelectedProducts()
    // {
    //     // Lọc các sản phẩm được chọn
    //     var selectedProducts = products.Where(p => p.IsSelected== true).ToList();

    //     if (selectedProducts.Any())
    //     {
    //         // Hiển thị hộp thoại xác nhận xóa
    //         var parameters = new DialogParameters<DeleteP> { { x => x.product, product } };
    //         var dialog = await DialogService.ShowAsync<DeleteP>("Delete selected products", parameters);
    //         var result = await dialog.Result;

    //         if (!result!.Canceled)
    //         {
    //             // Xóa các sản phẩm đã chọn
    //             foreach (var product in selectedProducts)
    //             {
    //                 await ItemManagement.DeleteItem(product);
    //             }

    //             products = await getAllSach();
    //         }
    //     }
    // }

}

 