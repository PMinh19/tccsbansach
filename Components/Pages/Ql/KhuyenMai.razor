@using BanSach.Components.Dialog.QlKhuyenmai
@using BanSach.Components.IService
@using BanSach.Components.Services
@using BanSach.Components.Model
@using System.Globalization
@inject IDialogService DialogService
@inject IItemManagement ItemManagement
@inject IDiscountServicecs DiscountService
@inject NavigationManager navigationManager
@inject HttpClient httpClient
@page "/khuyenmai"
<div style="display:flex; padding: 30px 30px 0 30px;">
    <h2 style="font-family:Arial;">Quản lí khuyến mãi </h2>
    <MudSpacer></MudSpacer>
    <MudButton OnClick="@((e)=>CreateAsync(discount))" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Thêm</MudButton>

</div>
<MudTable Items="@discounts" Dense="true" Breakpoint="Breakpoint.None" Virtualize="true"
Style="white-space:nowrap" Bordered="true" RowClass="cursor-pointer" Striped="true" Hover="true" HorizontalScrollbar="true">

    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh>Tên</MudTh>
        <MudTh>Giảm giá</MudTh>
        <MudTh>Giá bán</MudTh>
        <MudTh>Ngày bắt đầu </MudTh>
        <MudTh>Ngày kết thúc</MudTh>
        <MudTh>Sửa</MudTh>
        <MudTh>Xóa</MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="#">
            <MudTd DataLabel="#">
                <input name="selected" type="checkbox" />
            </MudTd>

        </MudTd>
        <MudTd DataLabel="Tên">
            <div>
                @GetProductName(context.ProductId)
            </div>
        </MudTd>
        <MudTd DataLabel="Giảm giá">
            <div>@string.Format(new CultureInfo("vi-VN"), "{0:N0}", context.Rate)</div>
        </MudTd>
        <MudTd DataLabel="Giá bán">
            <div>@string.Format(new CultureInfo("vi-VN"), "{0:N0}", context.SellPrice)</div>
        </MudTd>
        <MudTd DataLabel="Ngày bắt đầu"><div>@context.StartDate</div></MudTd>
        <MudTd DataLabel="Nhà kết thúc"><div>@context.EndDate</div></MudTd>
        <MudTd DataLabel="Sửa">
            <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" OnClick="@((e) => UpdateAsync(context))"></MudButton>
        </MudTd>
        <MudTd DataLabel="Xóa">
            <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" Color=Color.Error Size="Size.Small" OnClick="@((e) => DeleteAsync(context))" />

        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSize="10" @bind-PageIndex="@pageIndex" OnPageChanged="SetPage" />
    </PagerContent>
</MudTable>
@code {
    public Discount discount = new Discount();
    public List<Discount> discounts = new List<Discount>();
    public Product product = new Product();
    public List<Product> products = new List<Product>();
    private int pageSize = 10;
    private int pageIndex = 1;


    private void SetPage(int index)
    {
        pageIndex = index;
    }
    private async Task<List<Product>> getAllSach() => await ItemManagement.GetAllItem();
   

    protected override async Task OnInitializedAsync()
    {
        products = await ItemManagement.GetAllItem();
        discounts = await DiscountService.GetAllItem();
    }

    private string GetProductName(int productId)
    {
        var product = products.FirstOrDefault(c => c.ProductId == productId);
        return product?.ProductName ?? string.Empty;
    }
    private async Task UpdateAsync(Discount Discount)
    {
        var parameters = new DialogParameters<UpdateDiaLog> { { x => x.discount, Discount } };

        var dialog = await DialogService.ShowAsync<UpdateDiaLog>("Sửa khuyến mãi", parameters);
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await DiscountService.EditItem(Discount);
            await DiscountService.GetAllItem();
        }
    }
    private async Task CreateAsync(Discount Discount)
    {
        System.Diagnostics.Debug.WriteLine("dc");
        var parameters = new DialogParameters<CreateDiaLog> { { x => x.discount, Discount } };

        var dialog = await DialogService.ShowAsync<CreateDiaLog>("Thêm khuyễn mãi", parameters);
        var result = await dialog.Result;
        System.Diagnostics.Debug.WriteLine("dc");
        if (!result!.Canceled)
        {
            await DiscountService.EditItem(Discount);
            await DiscountService.GetAllItem();
        }

    }
    private async Task DeleteAsync(Discount Discount)
    {
        var parameters = new DialogParameters<DeleteConfirmDiaLog> { { x => x.Discount, Discount } };

        var dialog = await DialogService.ShowAsync<DeleteConfirmDiaLog>("Xóa giảm giá", parameters);
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await DiscountService.EditItem(Discount);
            await DiscountService.GetAllItem();
        }

    }
}
